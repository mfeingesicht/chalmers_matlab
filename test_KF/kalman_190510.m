%% POSITION MEASUREMENT%%
% EXAMPLE 3 - KALMAN FILTER %
%%% Version 10/05/2019 %%
%kalman filter implemented%
%noise implemented with random number not white noise block

clear all
close all
clc

t_sim = 100;         %simulation time [s]
v_true = zeros(t_sim,2);

% Definition of a path
lim_1=10;
lim_2=50;
lim_3=70;
lim_4=80;
v_1=3;
v_2=0;
v_3=-2;
v_4=2;
v_5=3;

% Definition of the velocity matrix
for i=0:+1:t_sim
    v_true(i+1,1)=i;
end

for i=0:+1:lim_1
    v_true(i+1,2)=v_1;
end

for i=lim_1:+1:lim_2
    v_true(i+1,2)=v_2;
end

for i=lim_2:+1:lim_3
    v_true(i+1,2)=v_3;
end 

for i=lim_3:+1:lim_4
    v_true(i+1,2)=v_4;
end

for i=lim_4:+1:t_sim
    v_true(i+1,2)=v_5;
end


% Definition of model - state space representation
Ts=0.1;    %sampling time[s]

A=[1 Ts; 0 1];
B=[0;0];
C=[1 0; 0 1];
D=[0;0];

noise_pos_meas=0.51; 
noise_hall=0.01;

% Process noise covariance
Q = [0.0001 0 ; 0 0.1];
% Measurement noise covariance
R = [noise_pos_meas 0; 0 noise_hall];


%% Optimize Q ga
% X0 = [0.001 0.1];
X0 = [0.0001    0.0285];

% ga_options = gaoptimset('StallGenLimit',50,'Display','iter');
% ga_options = gaoptimset('StallGenLimit',50,'Display','iter','TimeLimit',3600);
ga_options = gaoptimset('StallGenLimit',50,'Display','iter','TimeLimit',3600,'InitialPopulation',X0);

XQ = ga(@objfunc,2,[],[],[],[],[0 0],[],[],[],ga_options)
Q = diag(XQ);


%% Optimize Q fmincon
% X0 = [0.001 0.1];
% X0 = [0.0001    0.0285];
% 
% fmincon_options = optimoptions('fmincon','Display','iter');
% 
% XQ = fmincon(@objfunc,X0,[],[],[],[],[0 0],[],[],fmincon_options)
% Q = diag(XQ);


%% Simulation
sim('model_kalman_190510.slx')


%% Plot
figure(1)
plot(pos_true.Time, pos_true.Data, 'g')
hold on
plot(pos_est.Time, pos_est.Data, 'b')
hold on
plot(pos_meas.Time, pos_meas.Data, 'r')
hold on
plot(pos_filter.Time, pos_filter.Data(:,1), 'c')
title({'Position estimations - velocity integration and position measurement','compared to Kalman filter implementation'})
legend('True position', 'Position estimation from integrated velocity', 'Position estimation from measured position','Position estimation from Kalman filter implementation')
xlabel('Time [s]')
ylabel('Position [m]')

figure(2)
error_vel = abs(pos_true.Data - pos_est.Data);
error_pos = abs(pos_true.Data - pos_meas.Data);
error_filter = abs(pos_true.Data - pos_filter.Data(:,1));
plot(pos_true.Time, error_vel, 'b')
hold on
plot(pos_true.Time, error_pos, 'r')
hold on
plot(pos_true.Time, error_filter, 'c')
title(['Position estimations - absolute error generated by measurement methodologies'])
legend('Error from measured velocity integration', 'Error from position measurement', 'Error from Kalman filter implementation')
xlabel('Time [s]')
ylabel('Error [m]')
axis([0 t_sim -5 50])

figure(3)
error_vel_real = (pos_true.Data - pos_est.Data);
error_pos_real = (pos_true.Data - pos_meas.Data);
error_filter_real = (pos_true.Data - pos_filter.Data(:,1));
plot(pos_true.Time, error_vel_real, 'b')
hold on
plot(pos_true.Time, error_pos_real, 'r')
hold on
plot(pos_true.Time, error_filter_real, 'c')
title(['Position estimations - real error generated by measurement methodologies'])
legend('Error from measured velocity integration', 'Error from position measurement', 'Error from Kalman filter implementation')
xlabel('Time [s]')
ylabel('Error [m]')
axis([0 t_sim -10 10])

figure(4)
diff_error_filter_pos = error_pos-error_filter;
plot(pos_true.Time, diff_error_filter_pos, 'b')
title(['Difference between the relative error of the kalman filter and position measurement'])
xlabel('Time [s]')
ylabel('Error [m]')
axis([0 t_sim -10 10])

